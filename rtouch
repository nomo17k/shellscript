#!/usr/bin/env python2.6
"""
Update the access time of directory, files, and subdirectories using
the Linux `touch` command.
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
#from __future__ import unicode_literals
from glob import glob
from optparse import OptionParser
import os
from tempfile import TemporaryFile
from subprocess import Popen
from sys import stdout, stderr
from time import asctime, localtime


__version__ = '20101203'
__author__ = 'Taro Sato'
__email__ = 'ubutsu@gmail.com'


def setupcmd():
    """
    Construct the touch command to execute.
    """
    # check if touch exists
    sout = TemporaryFile('rw')
    p = Popen('which touch', shell=True, stdout=sout)
    p.wait()
    sout.seek(0)
    cmd = sout.read().strip()
    sout.close()
    if len(cmd) == 0:
        raise RuntimeError('touch not found')

    # test if '-h' command option can be used
    sout = TemporaryFile('rw')
    p = Popen('%s -h /dev/null' % cmd, shell=True, stderr=sout)
    p.wait()
    sout.seek(0)
    cmdopts = '-a -c' if len(sout.read().strip()) else '-a -c -h'
    sout.close()
    return '%s %s' % (cmd, cmdopts)


def onerror(e):
    print(e, file=stderr)


def docmd(cmd, path, fakerun=False):
    if len(glob(path)) == 0:
        return
    cmdline = '%s %s' % (cmd, path)
    print(cmdline)
    if fakerun is not False:
        Popen(cmdline, shell=True, stdout=stdout, stderr=stderr)


def rtouch(paths, fakerun=False):
    """
    Run `touch` command to update recursively the last access times of
    all files and subdirectories, starting at each path in the path list,

    Input:

      paths -- list of paths to top-level directories
    """
    cmd = setupcmd()
    info = asctime(localtime()) + (' [fake run]' if fakerun else '')
    print(info)
    for path in paths:
        if not os.path.isdir(path):
            onerror('skip %s: not a directory' % path)
            continue
        for parent, subs, fs in os.walk(path, topdown=False, onerror=onerror):
            docmd(cmd, '%s/*' % parent, fakerun=fakerun)
        # top-most directory has not been touched, so do it here:
        docmd(cmd, '%s' % path, fakerun=fakerun)


if __name__ == '__main__':
    usage = 'usage: %prog [OPTIONS] DIR1 [DIR2 ...]'
    p = OptionParser(usage=usage, description=__doc__.strip(),
                     version='%prog '+__version__)
    p.add_option('--fakerun', action='store_true', default=False,
                 help="get the list of directories but don't actually execute touch")
    opts, args = p.parse_args()
    rtouch(args, opts.fakerun)
